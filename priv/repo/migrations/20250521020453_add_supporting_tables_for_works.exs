defmodule Cineaste.Repo.Migrations.AddSupportingTablesForWorks do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tv_series_film_adaptations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :tv_series_id, :uuid, null: false
      add :film_id, :uuid, null: false
    end

    create table(:tv_series, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:tv_series_film_adaptations) do
      modify :tv_series_id,
             references(:tv_series,
               column: :id,
               name: "tv_series_film_adaptations_tv_series_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :film_id,
             references(:films,
               column: :id,
               name: "tv_series_film_adaptations_film_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:tv_series_film_adaptations, [:tv_series_id, :film_id],
             name: "tv_series_film_adaptations_unique_adaptation_index"
           )

    alter table(:tv_series) do
      add :slug, :text, null: false
      add :title, :text, null: false
      add :format, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:tv_series, [:slug], name: "tv_series_unique_slug_per_tv_series_index")

    create table(:short_story_film_adaptations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :short_story_id, :uuid, null: false
      add :film_id, :uuid, null: false
    end

    create table(:short_story_authors, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :short_story_id, :uuid, null: false
      add :author_id, :uuid, null: false
    end

    create table(:short_stories, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:short_story_film_adaptations) do
      modify :short_story_id,
             references(:short_stories,
               column: :id,
               name: "short_story_film_adaptations_short_story_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :film_id,
             references(:films,
               column: :id,
               name: "short_story_film_adaptations_film_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:short_story_film_adaptations, [:short_story_id, :film_id],
             name: "short_story_film_adaptations_unique_adaptation_index"
           )

    alter table(:short_story_authors) do
      modify :short_story_id,
             references(:short_stories,
               column: :id,
               name: "short_story_authors_short_story_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :author_id,
             references(:people,
               column: :id,
               name: "short_story_authors_author_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:short_story_authors, [:short_story_id, :author_id],
             name: "short_story_authors_unique_short_story_author_index"
           )

    alter table(:short_stories) do
      add :slug, :text, null: false
      add :title, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:short_stories, [:slug],
             name: "short_stories_unique_slug_per_short_story_index"
           )

    create table(:serials, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :slug, :text, null: false
      add :title, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:serials, [:slug], name: "serials_unique_slug_per_serial_index")

    create table(:serial_film_adaptations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :serial_id,
          references(:serials,
            column: :id,
            name: "serial_film_adaptations_serial_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :film_id,
          references(:films,
            column: :id,
            name: "serial_film_adaptations_film_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:serial_film_adaptations, [:serial_id, :film_id],
             name: "serial_film_adaptations_unique_adaptation_index"
           )

    create table(:serial_authors, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :serial_id,
          references(:serials,
            column: :id,
            name: "serial_authors_serial_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :author_id,
          references(:people,
            column: :id,
            name: "serial_authors_author_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:serial_authors, [:serial_id, :author_id],
             name: "serial_authors_unique_serial_author_index"
           )

    create table(:scripts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :slug, :text, null: false
      add :title, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:scripts, [:slug], name: "scripts_unique_slug_per_script_index")

    create table(:script_film_adaptations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :script_id,
          references(:scripts,
            column: :id,
            name: "script_film_adaptations_script_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :film_id,
          references(:films,
            column: :id,
            name: "script_film_adaptations_film_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:script_film_adaptations, [:script_id, :film_id],
             name: "script_film_adaptations_unique_adaptation_index"
           )

    create table(:script_authors, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :script_id,
          references(:scripts,
            column: :id,
            name: "script_authors_script_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :author_id,
          references(:people,
            column: :id,
            name: "script_authors_author_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:script_authors, [:script_id, :author_id],
             name: "script_authors_unique_script_author_index"
           )

    create table(:books, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :slug, :text, null: false
      add :title, :text, null: false
      add :format, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:books, [:slug], name: "books_unique_slug_per_book_index")

    create table(:book_series_film_adaptations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :book_series_id, :uuid, null: false
      add :film_id, :uuid, null: false
    end

    create table(:book_series_authors, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :book_series_id, :uuid, null: false
      add :author_id, :uuid, null: false
    end

    create table(:book_series, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:book_series_film_adaptations) do
      modify :book_series_id,
             references(:book_series,
               column: :id,
               name: "book_series_film_adaptations_book_series_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :film_id,
             references(:films,
               column: :id,
               name: "book_series_film_adaptations_film_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:book_series_film_adaptations, [:book_series_id, :film_id],
             name: "book_series_film_adaptations_unique_adaptation_index"
           )

    alter table(:book_series_authors) do
      modify :book_series_id,
             references(:book_series,
               column: :id,
               name: "book_series_authors_book_series_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :author_id,
             references(:people,
               column: :id,
               name: "book_series_authors_author_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:book_series_authors, [:book_series_id, :author_id],
             name: "book_series_authors_unique_book_series_author_index"
           )

    alter table(:book_series) do
      add :slug, :text, null: false
      add :title, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:book_series, [:slug],
             name: "book_series_unique_slug_per_book_series_index"
           )

    create table(:book_film_adaptations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :book_id,
          references(:books,
            column: :id,
            name: "book_film_adaptations_book_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :film_id,
          references(:films,
            column: :id,
            name: "book_film_adaptations_film_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:book_film_adaptations, [:book_id, :film_id],
             name: "book_film_adaptations_unique_adaptation_index"
           )

    create table(:book_authors, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :book_id,
          references(:books,
            column: :id,
            name: "book_authors_book_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :author_id,
          references(:people,
            column: :id,
            name: "book_authors_author_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:book_authors, [:book_id, :author_id],
             name: "book_authors_unique_book_author_index"
           )
  end

  def down do
    drop_if_exists unique_index(:book_authors, [:book_id, :author_id],
                     name: "book_authors_unique_book_author_index"
                   )

    drop constraint(:book_authors, "book_authors_book_id_fkey")

    drop constraint(:book_authors, "book_authors_author_id_fkey")

    drop table(:book_authors)

    drop_if_exists unique_index(:book_film_adaptations, [:book_id, :film_id],
                     name: "book_film_adaptations_unique_adaptation_index"
                   )

    drop constraint(:book_film_adaptations, "book_film_adaptations_book_id_fkey")

    drop constraint(:book_film_adaptations, "book_film_adaptations_film_id_fkey")

    drop table(:book_film_adaptations)

    drop_if_exists unique_index(:book_series, [:slug],
                     name: "book_series_unique_slug_per_book_series_index"
                   )

    alter table(:book_series) do
      remove :updated_at
      remove :inserted_at
      remove :title
      remove :slug
    end

    drop_if_exists unique_index(:book_series_authors, [:book_series_id, :author_id],
                     name: "book_series_authors_unique_book_series_author_index"
                   )

    drop constraint(:book_series_authors, "book_series_authors_book_series_id_fkey")

    drop constraint(:book_series_authors, "book_series_authors_author_id_fkey")

    alter table(:book_series_authors) do
      modify :author_id, :uuid
      modify :book_series_id, :uuid
    end

    drop_if_exists unique_index(:book_series_film_adaptations, [:book_series_id, :film_id],
                     name: "book_series_film_adaptations_unique_adaptation_index"
                   )

    drop constraint(
           :book_series_film_adaptations,
           "book_series_film_adaptations_book_series_id_fkey"
         )

    drop constraint(:book_series_film_adaptations, "book_series_film_adaptations_film_id_fkey")

    alter table(:book_series_film_adaptations) do
      modify :film_id, :uuid
      modify :book_series_id, :uuid
    end

    drop table(:book_series)

    drop table(:book_series_authors)

    drop table(:book_series_film_adaptations)

    drop_if_exists unique_index(:books, [:slug], name: "books_unique_slug_per_book_index")

    drop table(:books)

    drop_if_exists unique_index(:script_authors, [:script_id, :author_id],
                     name: "script_authors_unique_script_author_index"
                   )

    drop constraint(:script_authors, "script_authors_script_id_fkey")

    drop constraint(:script_authors, "script_authors_author_id_fkey")

    drop table(:script_authors)

    drop_if_exists unique_index(:script_film_adaptations, [:script_id, :film_id],
                     name: "script_film_adaptations_unique_adaptation_index"
                   )

    drop constraint(:script_film_adaptations, "script_film_adaptations_script_id_fkey")

    drop constraint(:script_film_adaptations, "script_film_adaptations_film_id_fkey")

    drop table(:script_film_adaptations)

    drop_if_exists unique_index(:scripts, [:slug], name: "scripts_unique_slug_per_script_index")

    drop table(:scripts)

    drop_if_exists unique_index(:serial_authors, [:serial_id, :author_id],
                     name: "serial_authors_unique_serial_author_index"
                   )

    drop constraint(:serial_authors, "serial_authors_serial_id_fkey")

    drop constraint(:serial_authors, "serial_authors_author_id_fkey")

    drop table(:serial_authors)

    drop_if_exists unique_index(:serial_film_adaptations, [:serial_id, :film_id],
                     name: "serial_film_adaptations_unique_adaptation_index"
                   )

    drop constraint(:serial_film_adaptations, "serial_film_adaptations_serial_id_fkey")

    drop constraint(:serial_film_adaptations, "serial_film_adaptations_film_id_fkey")

    drop table(:serial_film_adaptations)

    drop_if_exists unique_index(:serials, [:slug], name: "serials_unique_slug_per_serial_index")

    drop table(:serials)

    drop_if_exists unique_index(:short_stories, [:slug],
                     name: "short_stories_unique_slug_per_short_story_index"
                   )

    alter table(:short_stories) do
      remove :updated_at
      remove :inserted_at
      remove :title
      remove :slug
    end

    drop_if_exists unique_index(:short_story_authors, [:short_story_id, :author_id],
                     name: "short_story_authors_unique_short_story_author_index"
                   )

    drop constraint(:short_story_authors, "short_story_authors_short_story_id_fkey")

    drop constraint(:short_story_authors, "short_story_authors_author_id_fkey")

    alter table(:short_story_authors) do
      modify :author_id, :uuid
      modify :short_story_id, :uuid
    end

    drop_if_exists unique_index(:short_story_film_adaptations, [:short_story_id, :film_id],
                     name: "short_story_film_adaptations_unique_adaptation_index"
                   )

    drop constraint(
           :short_story_film_adaptations,
           "short_story_film_adaptations_short_story_id_fkey"
         )

    drop constraint(:short_story_film_adaptations, "short_story_film_adaptations_film_id_fkey")

    alter table(:short_story_film_adaptations) do
      modify :film_id, :uuid
      modify :short_story_id, :uuid
    end

    drop table(:short_stories)

    drop table(:short_story_authors)

    drop table(:short_story_film_adaptations)

    drop_if_exists unique_index(:tv_series, [:slug],
                     name: "tv_series_unique_slug_per_tv_series_index"
                   )

    alter table(:tv_series) do
      remove :updated_at
      remove :inserted_at
      remove :format
      remove :title
      remove :slug
    end

    drop_if_exists unique_index(:tv_series_film_adaptations, [:tv_series_id, :film_id],
                     name: "tv_series_film_adaptations_unique_adaptation_index"
                   )

    drop constraint(:tv_series_film_adaptations, "tv_series_film_adaptations_tv_series_id_fkey")

    drop constraint(:tv_series_film_adaptations, "tv_series_film_adaptations_film_id_fkey")

    alter table(:tv_series_film_adaptations) do
      modify :film_id, :uuid
      modify :tv_series_id, :uuid
    end

    drop table(:tv_series)

    drop table(:tv_series_film_adaptations)
  end
end
