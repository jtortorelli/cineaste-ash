defmodule Cineaste.Repo.Migrations.AddStudios do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:studios, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :slug, :text, null: false
      add :name, :text, null: false
      add :original_name, :text
      add :abbreviation, :text
      add :display_name, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:studios, [:slug], name: "studios_unique_slug_per_studio_index")

    create table(:studio_aliases, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :alias, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :studio_id,
          references(:studios,
            column: :id,
            name: "studio_aliases_studio_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:film_studios, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :film_id,
          references(:films,
            column: :id,
            name: "film_studios_film_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :studio_id,
          references(:studios,
            column: :id,
            name: "film_studios_studio_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:film_studios, [:film_id, :studio_id],
             name: "film_studios_unique_studio_per_film_index"
           )
  end

  def down do
    drop_if_exists unique_index(:film_studios, [:film_id, :studio_id],
                     name: "film_studios_unique_studio_per_film_index"
                   )

    drop constraint(:film_studios, "film_studios_film_id_fkey")

    drop constraint(:film_studios, "film_studios_studio_id_fkey")

    drop table(:film_studios)

    drop constraint(:studio_aliases, "studio_aliases_studio_id_fkey")

    drop table(:studio_aliases)

    drop_if_exists unique_index(:studios, [:slug], name: "studios_unique_slug_per_studio_index")

    drop table(:studios)
  end
end
